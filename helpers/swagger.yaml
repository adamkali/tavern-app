swagger: "2.0"
info:
  description: "Tavern is a GO server that servers the Tavern app. It deals with
                connecting Dungeons & Dragons nerds together in a friendly
                manner in a tinder like environment."
  version: "1.0.0"
  title: "Tavern-Backend"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "adamkali@outlook.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8000"
basePath: "/api"
tags:
- name: "Users"
  description: "The base model for users of the Tavern App."
- name: "Plots"
  description: "Access to the Plots for those who want to opt into running a game"
- name: "Characters"
  description: "Access User made Characters for those who want to opt into
                play as a player character."
schemes:
- "https"
- "http"
paths:
  /users:
    get:
      tags:
        - "Users"
      summary: "Get all users in the database."
      description: ""
      operationId: "getUsers"
      consumes:
        - "*/*"
      produces:
        - "application/json"
      responses:
        "200":
          description: ''
          schema:
            $ref: '#/definitions/UsersDetailedResponse'
    post:
      tags:
      - "Users"
      summary: "Add a new User to the databse"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object to be submitted to be used."
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: ''
          schema:
            $ref: '#/definitions/UserDetailedResponse'
  /users/{userId}:
    get:
      tags: 
        - "Users"
      summary: "Get a user by userId"
      operationId: 'getUserById'
      consumes: 
        - '*/*'
      parameters:
        - in: "query"
          name: "userId"
          type: "string"
          required: true
      produces:
        - "application/json"
      responses:
        "200":
          description: ''
          schema:
            $ref: "#/definitions/UserDetailedResponse"
    put:
      tags:
        - "Users"
      summary: "Update a user by userId"
      operationId: 'updateUserById'
      consumes:
        - "*/*"
      parameters:
        - in: "query"
          name: "userId"
          type: "string"
          required: true
        - in: "body"
          name: "body"
          description: "User object to be submitted to be used."
          required: true
          schema:
            $ref: "#/definitions/User"
      produces:
        - "application/json"
      responses:
        "200":
          description: ''
          schema:
            $ref: "#/definitions/UserDetailedResponse"
    delete:
      tags:
        - "Users"
      summary: "Get a user by userId"
      operationId: 'deleteUserById'
      consumes: 
        - '*/*'
      parameters:
        - in: "query"
          name: "userId"
          type: "string"
          required: true
      produces:
        - "application/json"
      responses:
        "200":
          description: ''
          schema:
            $ref: "#/definitions/UserDetailedResponse"
  /characters/{characterId}:
    get:
      tags: 
        - "Characters"
      summary: "Get a specific character by a its characterId"
      operationId: 'getCharacterById'
      consumes: 
        - '*/*'
      parameters:
        - in: "query"
          name: "characterId"
          type: "string"
          required: true
      produces:
        - "application/json"
      responses:
        "200":
          description: ''
          schema:
            $ref: "#/definitions/UserDetailedResponse"
    put:
      tags:
        - 'Characters'
      summary: "Update a specific character by its characterId"
      operationId: "updateCharacterByID"
      consumes:
        - '*/*'
      parameters:
        - in: "query"
          name: "characterId"
          type: "string"
          required: true
        - in: "body"
          name: "body"
          description: "User object to be submitted to be used."
          required: true
          schema:
            $ref: "#/definitions/Character"
      responses:
        "200":
          description: ''
          schema:
            $ref: "#/definitions/CharacterDetailedResponse"
    delete:
      tags:
        - "Characters"
      summary: "Delete a character by its characterId"
      operationId: 'deleteCharacterById'
      consumes: 
        - '*/*'
      parameters:
        - in: "query"
          name: "characterId"
          type: "string"
          required: true
      produces:
        - "application/json"
      responses:
        "200":
          description: ''
          schema:
            $ref: "#/definitions/CharacterDetailedResponse"
  /characters/userId/{userId}:
    get:
      tags:
        - "Characters"
      summary: "Get all Characters in the database."
      description: ""
      operationId: "getCharactersByUserId"
      consumes:
        - "*/*"
      parameters:
      - in: "query"
        name: "userId"
        type: "string"
        required: true
      produces:
        - "application/json"
      responses:
        "200":
          description: ''
          schema:
            $ref: '#/definitions/CharactersDetailedResponse'
    post:
      tags:
      - "Characters"
      summary: "Add a new Character to the databse"
      description: ""
      operationId: "addCharacterByUserId"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "userId"
        type: "string"
        required: true
      - in: "body"
        name: "body"
        description: "User object to be submitted to be used."
        required: true
        schema:
          $ref: "#/definitions/Character"
      responses:
        "200":
          description: ''
          schema:
            $ref: '#/definitions/CharacterDetailedResponse'
  /plots/{plotId}:
    get:
      tags: 
        - "Plots"
      summary: "Get a specific plot by a its plotId"
      operationId: 'getPlotById'
      consumes: 
        - '*/*'
      parameters:
        - in: "query"
          name: "plotId"
          type: "string"
          required: true
      produces:
        - "application/json"
      responses:
        "200":
          description: ''
          schema:
            $ref: "#/definitions/PlotDetailedResponse"
    put:
      tags:
        - 'Plots'
      summary: "Update a specific plot by its plotId"
      operationId: "updatePlotByID"
      consumes:
        - '*/*'
      parameters:
        - in: "query"
          name: "plotId"
          type: "string"
          required: true
        - in: "body"
          name: "body"
          description: "User object to be submitted to be used."
          required: true
          schema:
            $ref: "#/definitions/Plot"
      responses:
        "200":
          description: ''
          schema:
            $ref: "#/definitions/PlotDetailedResponse"
    delete:
      tags:
        - "Plots"
      summary: "Delete a plot by its plotId"
      operationId: 'deletePlotById'
      consumes: 
        - '*/*'
      parameters:
        - in: "query"
          name: "plotId"
          type: "string"
          required: true
      produces:
        - "application/json"
      responses:
        "200":
          description: ''
          schema:
            $ref: "#/definitions/PlotDetailedResponse"
  /Plots/userId/{userId}:
    get:
      tags:
        - "Plots"
      summary: "Get all Plots in the database."
      description: ""
      operationId: "getPlotsByUserId"
      consumes:
        - "*/*"
      parameters:
      - in: "query"
        name: "userId"
        type: "string"
        required: true
      produces:
        - "application/json"
      responses:
        "200":
          description: ''
          schema:
            $ref: '#/definitions/PlotsDetailedResponse'
    post:
      tags:
      - "Plots"
      summary: "Add a new Plot to the databse"
      description: ""
      operationId: "addPlotByUserId"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "userId"
        type: "string"
        required: true
      - in: "body"
        name: "body"
        description: "Plot object to be submitted to be used."
        required: true
        schema:
          $ref: "#/definitions/Plot"
      responses:
        "200":
          description: ''
          schema:
            $ref: '#/definitions/PlotDetailedResponse'

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Plot:
    type: 'object'
    properties:
      id: 
        type: 'string'
      plot_name:
        type: 'string'
      plot:
        type: 'string'
    xml:
      name: "Plot"
  Character:
    type: 'object'
    properties:
      id:
        type: 'string'
      character_name:
        type: 'string'
      back_story:
        type: 'string'
      bio:
        type: 'string'
      strength:
        type: 'integer'
      dexterity:
        type: 'integer'
      constitution:
        type: 'integer'
      intelligence:
        type: 'integer'
      wisdom:
        type: 'integer'
      charisma:
        type: 'integer'
      character_class:
        type: 'string'
      character_level:
        type: 'integer'
      character_traits:
        type: 'string'
    xml:
      name: 'Character'
  User:
    type: 'object'
    properties:
      id:
        type: 'string'
      username: 
        type: 'string'
      bio:
        type: 'string'
      tags:
        type: 'string'
      player_prefrence:
        type: 'string'
      user_plots:
        type: 'array'
        items:
          type: 'object'
          $ref: '#/definitions/Plot'
      user_characters:
        type: 'array'
        items:
          type: 'object'
          $ref: '#/definitions/Character'
    xml:
      name: "User"
  UserDetailedResponse:
    type: 'object'
    properties:
      data:
        type: 'object'
        $ref: '#/definitions/User'
      successful:
        type: 'boolean'
      message:
        type: 'string'
  UsersDetailedResponse:
    type: 'object'
    properties:
      data:
        type: 'array'
        items:
          type: 'object'
          $ref: '#/definitions/User'
      successful: 
        type: 'boolean'
      message:
        type: 'string'
  PlotDetailedResponse:
    type: 'object'
    properties:
      data:
        type: 'object'
        $ref: '#/definitions/Plot'
      successful:
        type: 'boolean'
      message:
        type: 'string'
  PlotsDetailedResponse:
    type: 'object'
    properties:
      data:
        type: 'array'
        items:
          type: 'object'
          $ref: '#/definitions/Plot'
      successful: 
        type: 'boolean'
      message:
        type: 'string'
  CharacterDetailedResponse:
    type: 'object'
    properties:
      data:
        type: 'object'
        $ref: '#/definitions/Character'
      successful:
        type: 'boolean'
      message:
        type: 'string'
  CharactersDetailedResponse:
    type: 'object'
    properties:
      data:
        type: 'array'
        items:
          type: 'object'
          $ref: '#/definitions/Character'
      successful: 
        type: 'boolean'
      message:
        type: 'string'

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"