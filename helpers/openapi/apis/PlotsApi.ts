/* tslint:disable */
/* eslint-disable */
/**
 * Tavern Profile Api
 * The Tavern-Profile-API is a backend application meant to geve access to users, see other profiles, and like or dislike profiles.
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Plot,
    PlotFromJSON,
    PlotToJSON,
    PlotDetailedResponse,
    PlotDetailedResponseFromJSON,
    PlotDetailedResponseToJSON,
    PlotsDetailedResponse,
    PlotsDetailedResponseFromJSON,
    PlotsDetailedResponseToJSON,
} from '../models';

export interface ApiPoltsPlotIdGetRequest {
    plotId: string;
}

export interface ApiPoltsPlotIdPostRequest {
    plotId: string;
    plot?: Plot;
}

export interface ApiPoltsUserIdUserIdDeleteRequest {
    userId: string;
}

export interface ApiPoltsUserIdUserIdGetRequest {
    userId: string;
}

export interface ApiPoltsUserIdUserIdPutRequest {
    userId: string;
    plot?: Plot;
}

/**
 * 
 */
export class PlotsApi extends runtime.BaseAPI {

    /**
     */
    async apiPoltsPlotIdGetRaw(requestParameters: ApiPoltsPlotIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PlotsDetailedResponse>> {
        if (requestParameters.plotId === null || requestParameters.plotId === undefined) {
            throw new runtime.RequiredError('plotId','Required parameter requestParameters.plotId was null or undefined when calling apiPoltsPlotIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/polts/{plotId}`.replace(`{${"plotId"}}`, encodeURIComponent(String(requestParameters.plotId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlotsDetailedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPoltsPlotIdGet(requestParameters: ApiPoltsPlotIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PlotsDetailedResponse> {
        const response = await this.apiPoltsPlotIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPoltsPlotIdPostRaw(requestParameters: ApiPoltsPlotIdPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PlotDetailedResponse>> {
        if (requestParameters.plotId === null || requestParameters.plotId === undefined) {
            throw new runtime.RequiredError('plotId','Required parameter requestParameters.plotId was null or undefined when calling apiPoltsPlotIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/polts/{plotId}`.replace(`{${"plotId"}}`, encodeURIComponent(String(requestParameters.plotId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlotToJSON(requestParameters.plot),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlotDetailedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPoltsPlotIdPost(requestParameters: ApiPoltsPlotIdPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PlotDetailedResponse> {
        const response = await this.apiPoltsPlotIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPoltsUserIdUserIdDeleteRaw(requestParameters: ApiPoltsUserIdUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PlotDetailedResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiPoltsUserIdUserIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/polts/userId/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlotDetailedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPoltsUserIdUserIdDelete(requestParameters: ApiPoltsUserIdUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PlotDetailedResponse> {
        const response = await this.apiPoltsUserIdUserIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPoltsUserIdUserIdGetRaw(requestParameters: ApiPoltsUserIdUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PlotDetailedResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiPoltsUserIdUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/polts/userId/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlotDetailedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPoltsUserIdUserIdGet(requestParameters: ApiPoltsUserIdUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PlotDetailedResponse> {
        const response = await this.apiPoltsUserIdUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPoltsUserIdUserIdPutRaw(requestParameters: ApiPoltsUserIdUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PlotDetailedResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiPoltsUserIdUserIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/polts/userId/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlotToJSON(requestParameters.plot),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlotDetailedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPoltsUserIdUserIdPut(requestParameters: ApiPoltsUserIdUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PlotDetailedResponse> {
        const response = await this.apiPoltsUserIdUserIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
