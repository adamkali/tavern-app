/* tslint:disable */
/* eslint-disable */
/**
 * Tavern Profile Api
 * The Tavern-Profile-API is a backend application meant to geve access to users, see other profiles, and like or dislike profiles.
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Character
 */
export interface Character {
    /**
     * 
     * @type {string}
     * @memberof Character
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Character
     */
    characterName?: string;
    /**
     * 
     * @type {string}
     * @memberof Character
     */
    backstory?: string;
    /**
     * 
     * @type {string}
     * @memberof Character
     */
    bio?: string;
    /**
     * 
     * @type {number}
     * @memberof Character
     */
    strength?: number;
    /**
     * 
     * @type {number}
     * @memberof Character
     */
    dexterity?: number;
    /**
     * 
     * @type {number}
     * @memberof Character
     */
    constitution?: number;
    /**
     * 
     * @type {number}
     * @memberof Character
     */
    intelligence?: number;
    /**
     * 
     * @type {number}
     * @memberof Character
     */
    wisdom?: number;
    /**
     * 
     * @type {number}
     * @memberof Character
     */
    charisma?: number;
    /**
     * 
     * @type {number}
     * @memberof Character
     */
    characterLevel?: number;
    /**
     * 
     * @type {string}
     * @memberof Character
     */
    characterClass?: string;
    /**
     * 
     * @type {string}
     * @memberof Character
     */
    characterTraits?: string;
}

export function CharacterFromJSON(json: any): Character {
    return CharacterFromJSONTyped(json, false);
}

export function CharacterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Character {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'characterName': !exists(json, 'character_name') ? undefined : json['character_name'],
        'backstory': !exists(json, 'backstory') ? undefined : json['backstory'],
        'bio': !exists(json, 'bio') ? undefined : json['bio'],
        'strength': !exists(json, 'strength') ? undefined : json['strength'],
        'dexterity': !exists(json, 'dexterity') ? undefined : json['dexterity'],
        'constitution': !exists(json, 'constitution') ? undefined : json['constitution'],
        'intelligence': !exists(json, 'intelligence') ? undefined : json['intelligence'],
        'wisdom': !exists(json, 'wisdom') ? undefined : json['wisdom'],
        'charisma': !exists(json, 'charisma') ? undefined : json['charisma'],
        'characterLevel': !exists(json, 'character_level') ? undefined : json['character_level'],
        'characterClass': !exists(json, 'character_class') ? undefined : json['character_class'],
        'characterTraits': !exists(json, 'character_traits') ? undefined : json['character_traits'],
    };
}

export function CharacterToJSON(value?: Character | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'character_name': value.characterName,
        'backstory': value.backstory,
        'bio': value.bio,
        'strength': value.strength,
        'dexterity': value.dexterity,
        'constitution': value.constitution,
        'intelligence': value.intelligence,
        'wisdom': value.wisdom,
        'charisma': value.charisma,
        'character_level': value.characterLevel,
        'character_class': value.characterClass,
        'character_traits': value.characterTraits,
    };
}

